#include<unordered_map>
#include<vector>
#include<list>
#include<queue>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	unordered_map< int,list<int> > adj;
	for(int i=0;i<edges.size();i++)
	{
		int v=edges[i].first;
		int u=edges[i].second;
		adj[v].push_back(u);
		adj[u].push_back(v);
	}
	unordered_map<int,bool> visited;
	unordered_map<int,int> parent;
	queue<int> q;        
			parent[s]=-1;
			q.push(s);
			visited[s]=true;
            while(!q.empty())
	       {
			int frontnodes=q.front();
			q.pop();
			for(auto neighbour : adj[frontnodes])
			{
				if(!visited[neighbour])
				{
					q.push(neighbour);
					visited[neighbour]=true;
					parent[neighbour]=frontnodes;
				}
			}
	      }
	vector<int> ans;
	int curr=t;
	ans.push_back(t);
	while(curr!=s)
	{
		curr=parent[curr];
		ans.push_back(curr);
	}
	reverse(ans.begin(),ans.end());
	return ans;	
}

